import json

class Producto:
    def __init__(self, nombre, precio, cantidad):
        self.nombre = nombre
        self.precio = precio
        self.cantidad = cantidad

    def to_dict(self):
        return {
            'nombre': self.nombre,
            'precio': self.precio,
            'cantidad': self.cantidad
        }

    @classmethod
    def from_dict(cls, data):
        return cls(data['nombre'], data['precio'], data['cantidad'])

    def __str__(self):
        return f'{self.nombre} - ${self.precio} - {self.cantidad} en stock'


class ProductoElectronico(Producto):
    def __init__(self, nombre, precio, cantidad, garantia):
        super().__init__(nombre, precio, cantidad)
        self.garantia = garantia

    def to_dict(self):
        data = super().to_dict()
        data.update({'garantia': self.garantia})
        return data

    @classmethod
    def from_dict(cls, data):
        producto = super(ProductoElectronico, cls).from_dict(data)
        return cls(producto.nombre, producto.precio, producto.cantidad, data['garantia'])

    def __str__(self):
        return f'{super().__str__()} - Garantía: {self.garantia} meses'


class ProductoAlimenticio(Producto):
    def __init__(self, nombre, precio, cantidad, fecha_expiracion):
        super().__init__(nombre, precio, cantidad)
        self.fecha_expiracion = fecha_expiracion

    def to_dict(self):
        data = super().to_dict()
        data.update({'fecha_expiracion': self.fecha_expiracion})
        return data

    @classmethod
    def from_dict(cls, data):
        producto = super(ProductoAlimenticio, cls).from_dict(data)
        return cls(producto.nombre, producto.precio, producto.cantidad, data['fecha_expiracion'])

    def __str__(self):
        return f'{super().__str__()} - Fecha de Expiración: {self.fecha_expiracion}'


class Inventario:
    def __init__(self, archivo):
        self.archivo = archivo
        self.productos = self.cargar_datos()

    def cargar_datos(self):
        try:
            with open(self.archivo, 'r') as file:
                data = json.load(file)
                return [self.crear_producto(p) for p in data]
        except FileNotFoundError:
            return []
        except json.JSONDecodeError:
            print("Error al leer el archivo JSON.")
            return []

    def guardar_datos(self):
        with open(self.archivo, 'w') as file:
            json.dump([p.to_dict() for p in self.productos], file, indent=4)

    def crear_producto(self, data):
        tipo = data.get('tipo')
        if tipo == 'electronico':
            return ProductoElectronico.from_dict(data)
        elif tipo == 'alimenticio':
            return ProductoAlimenticio.from_dict(data)
        else:
            raise ValueError(f"Tipo de producto desconocido: {tipo}")

    def agregar_producto(self, producto):
        self.productos.append(producto)
        self.guardar_datos()

    def listar_productos(self):
        for producto in self.productos:
            print(producto)

    def actualizar_producto(self, nombre, nuevo_producto):
        for i, producto in enumerate(self.productos):
            if producto.nombre == nombre:
                self.productos[i] = nuevo_producto
                self.guardar_datos()
                return
        raise ValueError("Producto no encontrado.")

    def eliminar_producto(self, nombre):
        self.productos = [p for p in self.productos if p.nombre != nombre]
        self.guardar_datos()


# Ejemplo de uso
if __name__ == "__main__":
    inventario = Inventario('productos.json')

    try:
        # Crear productos
        producto1 = ProductoElectronico('Smartphone', 699.99, 10, 24)
        producto2 = ProductoAlimenticio('Manzana', 0.99, 50, '2024-12-31')

        # Agregar productos al inventario
        inventario.agregar_producto(producto1)
        inventario.agregar_producto(producto2)

        # Listar productos
        print("Productos en el inventario:")
        inventario.listar_productos()

        # Actualizar producto
        nuevo_producto = ProductoElectronico('Smartphone', 649.99, 15, 24)
        inventario.actualizar_producto('Smartphone', nuevo_producto)

        # Eliminar producto
        inventario.eliminar_producto('Manzana')

        # Listar productos después de actualizaciones
        print("\nProductos en el inventario después de actualizaciones:")
        inventario.listar_productos()
        
    except ValueError as e:
        print(f"Error: {e}")
    except Exception as e:
        print(f"Ocurrió un error inesperado: {e}")

